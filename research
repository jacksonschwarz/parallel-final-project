/* Dijkstra's Algorithm in C */
#include<stdio.h>
#include<conio.h>
#include<process.h>
#include<string.h>
#include<math.h>
#define IN 99
#define N 6
int dijkstra(int cost[][N], int source, int target);
int main()
{
    int cost[N][N],i,j,w,ch,co;
    int source, target,x,y;
    printf("\t The Shortest Path Algorithm ( DIJKSTRA'S ALGORITHM in C \n\n");
    for(i=1;i< N;i++)
    for(j=1;j< N;j++)
    cost[i][j] = IN;
    for(x=1;x< N;x++)
    {
        for(y=x+1;y< N;y++)
        {
            printf("Enter the weight of the path between nodes %d and %d: ",x,y);
            scanf("%d",&w);
            cost [x][y] = cost[y][x] = w;
        }
        printf("\n");
    }
    printf("\nEnter the source:");
    scanf("%d", &source);
    printf("\nEnter the target");
    scanf("%d", &target);
    co = dijsktra(cost,source,target);
    printf("\nThe Shortest Path: %d",co);
}
int dijsktra(int cost[][N],int source,int target)
{
    int dist[N],prev[N],selected[N]={0},i,m,min,start,d,j;
    char path[N];
    for(i=1;i< N;i++)
    {
        dist[i] = IN;
        prev[i] = -1;
    }
    start = source;
    selected[start]=1;
    dist[start] = 0;
    while(selected[target] ==0)
    {
        min = IN;
        m = 0;
        for(i=1;i< N;i++)
        {
            d = dist[start] +cost[start][i];
            if(d< dist[i]&&selected[i]==0)
            {
                dist[i] = d;
                prev[i] = start;
            }
            if(min>dist[i] && selected[i]==0)
            {
                min = dist[i];
                m = i;
            }
        }
        start = m;
        selected[start] = 1;
    }
    start = target;
    j = 0;
    while(start != -1)
    {
        path[j++] = start+65;
        start = prev[start];
    }
    path[j]='\0';
    strrev(path);
    printf("%s", path);
    return dist[target];
}



*******************************************************

PSEUDO CODE

 function Dijkstra(Graph, source):
       dist[source]  := 0                     // Distance from source to source
       for each vertex v in Graph:            // Initializations
           if v ≠ source
               dist[v]  := infinity           // Unknown distance function from source to v
               previous[v]  := undefined      // Previous node in optimal path from source
           end if 
           add v to Q                         // All nodes initially in Q
       end for
      
      while Q is not empty:                  // The main loop
          u := vertex in Q with min dist[u]  // Source node in first case
          remove u from Q 
          
          for each neighbor v of u:           // where v has not yet been removed from Q.
              alt := dist[u] + length(u, v)
              if alt < dist[v]:               // A shorter path to v has been found
                  dist[v]  := alt 
                  previous[v]  := u 
              end if
          end for
      end while
      return dist[], previous[]
  end function

****************************************************
ALGORITHM STEPS

1. A tentative distance value is assigned to every node; 
this value is set to zero for the initial node, and to infinity for all other nodes.

2. All nodes unvisited are marked, and the initial node is set as current. 
An unvisited set ( a set of all the unvisited nodes) consisting of all the nodes is created.

3. For the current/initial node, take into account all the unvisited nearby nodes, and calculate their tentative distances. 
Make a comparison of the current assigned value and the newly calculated tentative distance; assign the smaller value. For example: 
if the current/initial node X was marked with a distance of 4, and the edge connecting it with a nearby neighbor node Y has length 1, 
then the distance through X to Y will be 4 + 1 = 5. If Y was previously assigned a value greater than 5, then change it to 5. 
Otherwise, keep the value as it is.

4. A visited node is never to be checked again. So, after finishing above steps with all the neighbors of the current node,
make that node as visited and remove is from the unvisited set.

5. Stop the algorithm if, when planning a route between two specific nodes, the destination node has been marked visited.

6. Also, stop the algorithm if, when planning a complete traversal, 
the smallest tentative distance among the nodes in the unvisited set is infinity. 
This case is a result of no connection between the initial node and the remaining unvisited nodes.

7. Find the unvisited node assigned with the smallest tentative distance value, 
and this will be the new “current mode”. Go back to step 3, and continue.
